---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  An EC2 Instance and Data Lake Infrastructure that utilizes the Reddit API to
  collect comments from a list of subreddits and stores them in Amazon S3.
  Data catalogued and schema defined by AWS Glue.

Parameters:

  # S3 Parameters Layer
  # -----------------------------------------------------------

  pBucketName:
    Type: String
    Description: S3 - Bucket Name

  # Glue Parameters Layer
  # -----------------------------------------------------------

  pGlueDBName:
    Type: String
    Description: Glue - Database/Data Catalog Name
    Default: reddit_db

  pGlueTableNameComments:
    Type: String
    Description: Glue - table name for comment data
    Default: reddit_comments

  # Kinesis Parameters Layer
  # -----------------------------------------------------------

  pCommentsDeliveryStreamName:
    Type: String
    Description: Kinesis - delivery stream for comment data
    Default: reddit-comment-delivery-stream

  # EC2 Parameters Layer
  # -----------------------------------------------------------

  pKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: >
      EC2 - Name of an existing EC2 KeyPair to enable SSH access to the instance
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  pInstanceType:
    Type: String
    Description: EC2 - WebServer EC2 instance type
    Default: t3.small
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  pSSHLocation:
    Type: String
    Description: >
      EC2 - The IP address range that can be used to SSH to the EC2 instances
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  pRedditUsername:
    Type: String
    Description: The username for your reddit account

  pRedditPassword:
    Type: String
    Description: The password for your reddit account
    NoEcho: true

  pRedditClientID:
    Type: String
    Description: >
      The client ID for your reddit app
      (found at https://www.reddit.com/prefs/apps/ )

  pRedditAppSecret:
    Type: String
    Description: >
      The app secret for your reddit app
      (found at https://www.reddit.com/prefs/apps/ )

  pSubredditList:
    Type: String
    Description: >
      space delimited list of subreddits that data will be streamed from.
    Default: >
      funny AskReddit worldnews pics science gaming todayilearned videos movies
      aww IAmA Music gifs news blog askscience explainlikeimfive Showerthoughts
      books mildlyinteresting television LifeProTips Jokes DIY space food
      gadgets nottheonion sports Art photoshopbattles GetMotivated Documentaries
      UpliftingNews listentothis dataisbeautiful history Futurology
      personalfinance OldSchoolCool philosophy WritingPrompts technology Fitness
      apple iphone applewatch applemusic ipad android ios appletv technology mac
      applecard homepod gadgets stocks investing applehelp fantasyfootball nba
      MMA soccer nfl wallstreetbets travel aws nintendo bitcoin baseball
      CollegeBasketball

  pAppGitRepoURL:
    Type: String
    Description: >
      url to the git repo containing the data generator python application
    Default: https://github.com/CYarros10/reddit-streaming-application.git


Mappings:
  AWSInstanceType2Arch:
    t3.nano:
      Arch: HVM64
    t3.micro:
      Arch: HVM64
    t3.small:
      Arch: HVM64
    t3.medium:
      Arch: HVM64
    t3.large:
      Arch: HVM64
    t3.xlarge:
      Arch: HVM64
    t3.2xlarge:
      Arch: HVM64

  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0b898040803850657


Resources:

  # S3 Resources Layer
  # -----------------------------------------------------------
  rS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref pBucketName

  # Glue Resources Layer
  # -----------------------------------------------------------

  rGlueDatabase:
    Type: "AWS::Glue::Database"
    Properties:
      DatabaseInput:
        Name: !Ref pGlueDBName
      CatalogId: !Ref AWS::AccountId

  rGlueTableComments:
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref rGlueDatabase
      CatalogId: !Ref AWS::AccountId
      TableInput:
        Name: !Ref pGlueTableNameComments
        Parameters: { "classification" : "json" }
        StorageDescriptor:
          Location:
            Fn::Join:
              - ''
              - - "s3://"
                - !Ref pBucketName
                - "/"
                - !Ref pGlueTableNameComments
                - "/"
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          BucketColumns: []
          SortColumns: []
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
            Parameters:
              serialization.format: '1'
          StoredAsSubDirectories: false
          Columns:
            - {Name: comment_id, Type: string}
            - {Name: subreddit, Type: string}
            - {Name: author, Type: string}
            - {Name: comment_text, Type: string}
            - {Name: distinguished, Type: string}
            - {Name: submitter, Type: boolean}
            - {Name: total_words, Type: int}
            - {Name: reading_ease_score, Type: double}
            - {Name: reading_ease, Type: string}
            - {Name: reading_grade_level, Type: string}
            - {Name: sentiment_score, Type: double}
            - {Name: censored, Type: int}
            - {Name: comment_language, Type: string}
            - {Name: positive, Type: int}
            - {Name: neutral, Type: int}
            - {Name: negative, Type: int}
            - {Name: subjectivity_score, Type: double}
            - {Name: subjective, Type: int}
            - {Name: url, Type: string}
            - {Name: comment_date, Type: string}
            - {Name: comment_timestamp, Type: string}
            - {Name: comment_hour, Type: int}
            - {Name: comment_year, Type: int}
            - {Name: comment_month, Type: int}
            - {Name: comment_day, Type: int}
        PartitionKeys: []
        TableType: EXTERNAL_TABLE

  rGlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: /
      Policies:
        - PolicyName: glueserviceroles3access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref pBucketName
                    - /*
              - Effect: Allow
                Action:
                  - s3:HeadBucket
                  - s3:List*
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref pBucketName

  rGlueCrawlerRaw:
    Type: AWS::Glue::Crawler
    Properties:
      Role:
        !GetAtt rGlueCrawlerRole.Arn
      DatabaseName: !Ref pGlueDBName
      Targets:
        S3Targets:
          - Path: !Join
              - /
              - - s3:/
                - !Ref pBucketName
                - /
                - !Ref pGlueTableNameComments
                - /


  # Kinesis Resources Layer
  # -----------------------------------------------------------

  rFirehoseCommentsDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Ref pCommentsDeliveryStreamName
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt rKinesisDeliveryRole.Arn
        BucketARN: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref pBucketName
        Prefix: !Join
          - ''
          - - !Ref pGlueTableNameComments
            - '/'
        ErrorOutputPrefix: !Join
          - ''
          - - !Ref pGlueTableNameComments
            - '_error'
        BufferingHints:
          SizeInMBs: 128
          IntervalInSeconds: 90
        CompressionFormat: UNCOMPRESSED
        EncryptionConfiguration:
          NoEncryptionConfig: NoEncryption
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Join
            - ''
            - - 'KDF-'
              - !Ref pGlueTableNameComments
          LogStreamName: S3Delivery
        S3BackupMode: Disabled

  rKinesisDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
      Path: "/"
      Policies:
        - PolicyName: firehose_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref pBucketName
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref pBucketName
                      - '*'
              - Effect: Allow
                Action: 'glue:GetTableVersions'
                Resource: '*'
              - Effect: Allow
                Action: 'logs:PutLogEvents'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:logs:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - 'log-group:/aws/kinesisfirehose/KDF-'
                      - !Ref pGlueTableNameComments
                      - ':log-stream:*'

  rS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref 'AWS::AccountId'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref pBucketName
                  - !Join
                    - ''
                    - - !Join
                        - ''
                        - - 'arn:aws:s3:::'
                          - !Ref pBucketName
                      - /*

  # EC2 Resources Layer
  # -----------------------------------------------------------

  rEC2RedditStreamingApp:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        !Ref pInstanceType
      IamInstanceProfile: !Ref rEC2IamInstanceProfile
      SecurityGroups:
        - !Ref rInstanceSecurityGroup
      KeyName:
        !Ref pKeyName
      ImageId:
        Fn::FindInMap:
          - AWSRegionArch2AMI
          - !Ref AWS::Region
          - Fn::FindInMap:
              - AWSInstanceType2Arch
              - !Ref pInstanceType
              - Arch
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            -
              - "#!/bin/bash -xe"
              - "\n"
              - "echo \"install python and git...\""
              - "\n"
              - "yum install python3 -y"
              - "\n"
              - "yum install git -y"
              - "\n"
              - "echo \"installing pip...\""
              - "\n"
              - "curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py"
              - "\n"
              - " python3 get-pip.py"
              - "\n"
              - "echo \"importing python libraries...\""
              - "\n"
              - "python3 -m pip install praw"
              - "\n"
              - "python3 -m pip install pandas"
              - "\n"
              - "python3 -m pip install textblob"
              - "\n"
              - "python3 -m pip install better_profanity"
              - "\n"
              - "python3 -m pip install boto3"
              - "\n"
              - "python3 -m pip install textstat"
              - "\n"
              - "python3 -m textblob.download_corpora"
              - "\n"
              - "echo \"downloads complete...\""
              - "\n"
              - "echo \"creating dirs for git repo...\""
              - "\n"
              - "mkdir reddit"
              - "\n"
              - "cd reddit"
              - "\n"
              - "git init"
              - "\n"
              - "git clone "
              - !Ref pAppGitRepoURL
              - "\n"
              - "echo \"git clone complete...\""
              - "\n"
              - "cd reddit-streaming-application/app/"
              - "\n"
              - "echo \"current dir:\""
              - "\n"
              - "pwd"
              - "\n"
              - "echo \"changing permissions\""
              - "\n"
              - "chmod 777 comment-stream-detailed.py"
              - "\n"
              - "chmod 777 praw.ini"
              - "\n"
              - "echo \"editing files with user params\""
              - "\n"
              - "sed -i -r 's/<insert-delivery-stream-name>/"
              - !Ref rFirehoseCommentsDeliveryStream
              - "/g' comment-stream-detailed.py"
              - "\n"
              - "sed -i -r 's/<insert-client-id-here>/"
              - !Ref pRedditClientID
              - "/g' praw.ini"
              - "\n"
              - "sed -i -r 's/<insert-client-secret-here>/"
              - !Ref pRedditAppSecret
              - "/g' praw.ini"
              - "\n"
              - "sed -i -r 's/<insert-username-here>/"
              - !Ref pRedditUsername
              - "/g' praw.ini"
              - "\n"
              - "sed -i -r 's/<insert-password-here>/"
              - !Ref pRedditPassword
              - "/g' praw.ini"
              - "\n"
              - "python3 comment-stream-detailed.py "
              - !Ref pSubredditList
              - "</dev/null &>/dev/null &> error-log.txt"

  rInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            !Ref pSSHLocation

  rEC2IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref rEC2KinesisRole

  rEC2KinesisRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

Outputs:

  # S3 Outputs Layer
  # -----------------------------------------------------------
  oS3Bucket:
    Description: Name of S3 bucket
    Value:
      !Ref pBucketName
    Export:
      Name: !Sub "${AWS::StackName}-oS3Bucket"

  oS3BucketSecureURL:
    Description: URL of S3 bucket
    Value:
      Fn::Join:
        - ''
        - - https://
          - Fn::GetAtt:
              - rS3Bucket
              - DomainName
    Export:
      Name: !Sub "${AWS::StackName}-oS3BucketSecureURL"

  # Glue Outputs Layer
  # -----------------------------------------------------------
  oGlueDatabase:
    Description: Database created for Glue
    Value: !Ref rGlueDatabase
    Export:
      Name: !Sub "${AWS::StackName}-oGlueDatabase"

  oGlueTableComments:
    Description: table created for Glue
    Value: !Ref pGlueTableNameComments
    Export:
      Name: !Sub "${AWS::StackName}-oGlueTableComments"

  # Kinesis Outputs Layer
  # -----------------------------------------------------------

  oKinesisS3CommentsFirehose:
    Description: The Kinesis Delivery Stream receiving raw reddit data
    Value: !Ref rFirehoseCommentsDeliveryStream
    Export:
      Name: !Sub "${AWS::StackName}-oKinesisS3CommentsFirehose"

  oKinesisS3CommentsFirehoseARN:
    Description: The Kinesis Delivery Stream receiving raw reddit data
    Value: !GetAtt rFirehoseCommentsDeliveryStream.Arn
    Export:
      Name: !Sub "${AWS::StackName}-oKinesisS3CommentsFirehoseARN"

  # EC2 Outputs Layer
  # -----------------------------------------------------------

  oInstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value:
      !Ref rEC2RedditStreamingApp
  oAZ:
    Description: Availability Zone of the newly created EC2 instance
    Value:
      Fn::GetAtt:
        - rEC2RedditStreamingApp
        - AvailabilityZone
  oPublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value:
      Fn::GetAtt:
        - rEC2RedditStreamingApp
        - PublicDnsName
  oPublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value:
      Fn::GetAtt:
        - rEC2RedditStreamingApp
        - PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-oPublicIP"
  oSubredditList:
    Description: >
      space-delimited list of subreddits for this given comment stream
    Value: !Ref  pSubredditList
